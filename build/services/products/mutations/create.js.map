{"version":3,"file":"create.js","sourceRoot":"","sources":["../../../../src/services/products/mutations/create.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAE1B,0CAAmD;AAE5C,MAAM,cAAc,GAAa,KAAK,IAAqB,EAAE;IAClE,MAAM,cAAc,GAAgB;QAClC,EAAE,EAAE,CAAC;QACL,SAAS,EAAE,EAAE;QACb,KAAK,EAAE,EAAE;QACT,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,IAAI,IAAI,EAAE;QACrB,SAAS,EAAE,IAAI,IAAI,EAAE;QACrB,WAAW,EAAE,EAAE;KAChB,CAAC;IAEF,IAAI,CAAC;QACH,MAAM,cAAc,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE,CAAC,CAAC;QAE3E,MAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC;QAEnD,MAAM,eAAe,GAAkB,EAAE,CAAC;QAE1C,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,OAAY,EAAE,EAAE;YACvC,cAAc,CAAC,KAAK,GAAG,EAAE,CAAC;YAC1B,MAAM,MAAM,GAAa,EAAE,CAAC;YAE5B,cAAc,CAAC,SAAS,GAAG,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;YACjD,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACzC,cAAc,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACnC,cAAc,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;YAC9C,cAAc,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;YAE9C,8DAA8D;YAC9D,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAY,EAAE,EAAE;gBACpC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACzC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,WAAW,GAAG,MAAM,CAAC;YAEpC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAErC,MAAM,IAAA,mBAAc,EAAC,cAAc,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IACzB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;AACH,CAAC,CAAC;AA7CW,QAAA,cAAc,kBA6CzB","sourcesContent":["import axios from \"axios\";\nimport { ProductType } from \"@src/types\";\nimport { productStorage } from \"@src/utilities/db\";\n\nexport const createProducts: Function = async (): Promise<Object> => {\n  const prodObjForPost: ProductType = {\n    id: 0,\n    productId: \"\",\n    title: [],\n    tags: \"\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    productCode: [],\n  };\n\n  try {\n    const dataForParsing = await axios.get(process.env.PRODUCT_POST_URL || \"\");\n\n    const productsArray = dataForParsing.data.products;\n\n    const returnArrayJSON: ProductType[] = [];\n\n    productsArray.map(async (product: any) => {\n      prodObjForPost.title = [];\n      const skuArr: string[] = [];\n\n      prodObjForPost.productId = product.id.toString();\n      prodObjForPost.title.push(product.title);\n      prodObjForPost.tags = product.tags;\n      prodObjForPost.createdAt = product.created_at;\n      prodObjForPost.updatedAt = product.updated_at;\n\n      // loop through the variants field and push sku's in the array\n      product.variants.map((variant: any) => {\n        prodObjForPost.title.push(variant.title);\n        skuArr.push(variant.sku);\n      });\n\n      prodObjForPost.productCode = skuArr;\n\n      returnArrayJSON.push(prodObjForPost);\n\n      await productStorage(prodObjForPost);\n    });\n\n    return returnArrayJSON;\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n"]}