{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/services/products/queries/index.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAE1B,0CAAmD;AAE5C,MAAM,WAAW,GAAa,KAAK,IAAqB,EAAE;IAC/D,MAAM,OAAO,GAAgB;QAC3B,EAAE,EAAE,CAAC;QACL,SAAS,EAAE,EAAE;QACb,KAAK,EAAE,EAAE;QACT,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,IAAI,IAAI,EAAE;QACrB,SAAS,EAAE,IAAI,IAAI,EAAE;QACrB,WAAW,EAAE,EAAE;KAChB,CAAC;IAEF,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC;QAEpE,MAAM,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;QAE7C,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,OAAY,EAAE,EAAE;YACvC,OAAO,CAAC,KAAK,GAAG,EAAE,CAAC;YACnB,MAAM,MAAM,GAAa,EAAE,CAAC;YAE5B,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;YAC1C,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAClC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YAC5B,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;YACvC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC;YAEvC,8DAA8D;YAC9D,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAY,EAAE,EAAE;gBACpC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAClC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC;YAE7B,MAAM,IAAA,mBAAc,EAAC,OAAO,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,OAAO,EAAE,8CAA8C,EAAE,CAAC;IACrE,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;AACH,CAAC,CAAC;AAzCW,QAAA,WAAW,eAyCtB","sourcesContent":["import axios from \"axios\";\nimport { ProductType } from \"@src/types\";\nimport { productStorage } from \"@src/utilities/db\";\n\nexport const getProducts: Function = async (): Promise<Object> => {\n  const prodObj: ProductType = {\n    id: 0,\n    productId: \"\",\n    title: [],\n    tags: \"\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    productCode: [],\n  };\n\n  try {\n    const response = await axios.get(process.env.PRODUCT_GET_URL || \"\");\n\n    const productsArray = response.data.products;\n\n    productsArray.map(async (product: any) => {\n      prodObj.title = [];\n      const skuArr: string[] = [];\n\n      prodObj.productId = product.id.toString();\n      prodObj.title.push(product.title);\n      prodObj.tags = product.tags;\n      prodObj.createdAt = product.created_at;\n      prodObj.updatedAt = product.updated_at;\n\n      // loop through the variants field and push sku's in the array\n      product.variants.map((variant: any) => {\n        prodObj.title.push(variant.title);\n        skuArr.push(variant.sku);\n      });\n\n      prodObj.productCode = skuArr;\n\n      await productStorage(prodObj);\n    });\n\n    return { message: \"Successfully inserted records into database \" };\n  } catch (error: any) {\n    throw new Error(error);\n  }\n};\n"]}