{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/utilities/db/index.ts"],"names":[],"mappings":";;;;;;AAAA,mEAA8C;AAGvC,MAAM,cAAc,GAAa,KAAK,EAAE,WAAwB,EAAE,EAAE;IACzE,IAAI,CAAC;QACH,MAAM,gBAAS,CAAC,OAAO,CAAC,MAAM,CAAC;YAC7B,IAAI,EAAE;gBACJ,SAAS,EAAE,WAAW,CAAC,SAAS,CAAC,QAAQ,EAAE;gBAC3C,KAAK,EAAE,WAAW,CAAC,KAAK;gBACxB,IAAI,EAAE,WAAW,CAAC,IAAI;gBACtB,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,WAAW,EAAE,WAAW,CAAC,WAAW;aACrC;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAfW,QAAA,cAAc,kBAezB;AAEK,MAAM,aAAa,GAAa,KAAK,EAC1C,WAAwB,EACxB,SAAiB,EACjB,EAAE;IACF,IAAI,CAAC;QACH,MAAM,gBAAS,CAAC,OAAO,CAAC,MAAM,CAAC;YAC7B,KAAK,EAAE;gBACL,EAAE,EAAE,SAAS;aACd;YACD,IAAI,EAAE;gBACJ,KAAK,EAAE,WAAW,CAAC,KAAK;aACzB;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAhBW,QAAA,aAAa,iBAgBxB;AAEK,MAAM,aAAa,GAAa,KAAK,EAAE,SAAiB,EAAE,EAAE;IACjE,IAAI,CAAC;QACH,MAAM,iBAAiB,GAAG,MAAM,gBAAS,CAAC,OAAO,CAAC,SAAS,CAAC;YAC1D,KAAK,EAAE;gBACL,EAAE,EAAE,SAAS;aACd;SACF,CAAC,CAAC;QAEH,IAAI,iBAAiB,EAAE,CAAC;YACtB,MAAM,gBAAS,CAAC,OAAO,CAAC,MAAM,CAAC;gBAC7B,KAAK,EAAE;oBACL,EAAE,EAAE,SAAS;iBACd;aACF,CAAC,CAAC;YACH,OAAO,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;QAClD,CAAC;QACD,OAAO,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IAC/C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AApBW,QAAA,aAAa,iBAoBxB;AAEK,MAAM,WAAW,GAAa,KAAK,IAA4B,EAAE;IACtE,IAAI,CAAC;QACH,OAAO,MAAM,gBAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC5C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AANW,QAAA,WAAW,eAMtB","sourcesContent":["import mindArcDB from \"@src/utilities/prisma\";\nimport { ProductType } from \"@src/types\";\n\nexport const productStorage: Function = async (productData: ProductType) => {\n  try {\n    await mindArcDB.product.create({\n      data: {\n        productId: productData.productId.toString(),\n        title: productData.title,\n        tags: productData.tags,\n        createdAt: productData.createdAt,\n        updatedAt: productData.updatedAt,\n        productCode: productData.productCode,\n      },\n    });\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const productUpdate: Function = async (\n  productData: ProductType,\n  productId: number,\n) => {\n  try {\n    await mindArcDB.product.update({\n      where: {\n        id: productId,\n      },\n      data: {\n        title: productData.title,\n      },\n    });\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const productDelete: Function = async (productId: number) => {\n  try {\n    const recordForDeletion = await mindArcDB.product.findFirst({\n      where: {\n        id: productId,\n      },\n    });\n\n    if (recordForDeletion) {\n      await mindArcDB.product.delete({\n        where: {\n          id: productId,\n        },\n      });\n      return { message: \"A record has been deleted\" };\n    }\n    return { message: \"Record does not exists\" };\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getProducts: Function = async (): Promise<ProductType[]> => {\n  try {\n    return await mindArcDB.product.findMany();\n  } catch (error) {\n    throw error;\n  }\n};\n"]}